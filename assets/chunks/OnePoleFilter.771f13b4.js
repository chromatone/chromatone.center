import{T as o,o as c,G as u}from"./index.cccf7ef0.js";class r extends o{constructor(){super(c(r.getDefaults(),arguments,["frequency","type"])),this.name="OnePoleFilter";const t=c(r.getDefaults(),arguments,["frequency","type"]);this._frequency=t.frequency,this._type=t.type,this.input=new u({context:this.context}),this.output=new u({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(o.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){const t=this._filter,n=this.toFrequency(this._frequency),i=1/(2*Math.PI*n);if(this._type==="lowpass"){const e=1/(i*this.context.sampleRate),s=e-1;this._filter=this.context.createIIRFilter([e,0],[1,s])}else{const e=1/(i*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,e])}this.input.chain(this._filter,this.output),t&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(t),t.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(t){this._frequency=t,this._createFilter()}get type(){return this._type}set type(t){this._type=t,this._createFilter()}getFrequencyResponse(t=128){const n=new Float32Array(t);for(let s=0;s<t;s++){const a=Math.pow(s/t,2)*(2e4-20)+20;n[s]=a}const i=new Float32Array(t),e=new Float32Array(t);return this._filter.getFrequencyResponse(n,i,e),i}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}}export{r as O};
