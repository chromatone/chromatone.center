import{f as i,o as a,P as _,r as s,G as c,g as d,x as l,b as m}from"./index.e98b5e67.js";import{e as p,S as u,M as y}from"./audio.36f0d408.js";class t extends i{constructor(){super(a(t.getDefaults(),arguments,["delayTime","maxDelay"])),this.name="Delay";const e=a(t.getDefaults(),arguments,["delayTime","maxDelay"]),o=this.toSeconds(e.maxDelay);this._maxDelay=Math.max(o,this.toSeconds(e.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(o),this.delayTime=new _({context:this.context,param:this._delayNode.delayTime,units:"time",value:e.delayTime,minValue:0,maxValue:this.maxDelay}),s(this,"delayTime")}static getDefaults(){return Object.assign(i.getDefaults(),{delayTime:0,maxDelay:1})}get maxDelay(){return this._maxDelay}dispose(){return super.dispose(),this._delayNode.disconnect(),this.delayTime.dispose(),this}}class r extends i{constructor(e){super(e),this.name="StereoEffect",this.input=new c({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new p({context:this.context,fade:e.wet}),this.wet=this._dryWet.fade,this._split=new u({context:this.context,channels:2}),this._merge=new y({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),s(this,["wet"])}connectEffectLeft(...e){this._split.connect(e[0],0,0),d(...e),l(e[e.length-1],this._merge,0,0)}connectEffectRight(...e){this._split.connect(e[0],1,0),d(...e),l(e[e.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(i.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}}class x extends r{constructor(e){super(e),this.feedback=new m({context:this.context,value:e.feedback,units:"normalRange"}),this._feedbackL=new c({context:this.context}),this._feedbackR=new c({context:this.context}),this._feedbackSplit=new u({context:this.context,channels:2}),this._feedbackMerge=new y({context:this.context,channels:2}),this._merge.connect(this._feedbackSplit),this._feedbackMerge.connect(this._split),this._feedbackSplit.connect(this._feedbackL,0,0),this._feedbackL.connect(this._feedbackMerge,0,0),this._feedbackSplit.connect(this._feedbackR,1,0),this._feedbackR.connect(this._feedbackMerge,0,1),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),s(this,["feedback"])}static getDefaults(){return Object.assign(r.getDefaults(),{feedback:.5})}dispose(){return super.dispose(),this.feedback.dispose(),this._feedbackL.dispose(),this._feedbackR.dispose(),this._feedbackSplit.dispose(),this._feedbackMerge.dispose(),this}}class f extends x{constructor(e){super(e),this._feedbackL.disconnect(),this._feedbackL.connect(this._feedbackMerge,0,1),this._feedbackR.disconnect(),this._feedbackR.connect(this._feedbackMerge,0,0),s(this,["feedback"])}}class n extends f{constructor(){super(a(n.getDefaults(),arguments,["delayTime","feedback"])),this.name="PingPongDelay";const e=a(n.getDefaults(),arguments,["delayTime","feedback"]);this._leftDelay=new t({context:this.context,maxDelay:e.maxDelay}),this._rightDelay=new t({context:this.context,maxDelay:e.maxDelay}),this._rightPreDelay=new t({context:this.context,maxDelay:e.maxDelay}),this.delayTime=new m({context:this.context,units:"time",value:e.delayTime}),this.connectEffectLeft(this._leftDelay),this.connectEffectRight(this._rightPreDelay,this._rightDelay),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackL.disconnect(),this._feedbackL.connect(this._rightDelay),s(this,["delayTime"])}static getDefaults(){return Object.assign(f.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._leftDelay.dispose(),this._rightDelay.dispose(),this._rightPreDelay.dispose(),this.delayTime.dispose(),this}}export{n as P};
