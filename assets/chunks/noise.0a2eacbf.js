import{o as d,G as v,Z as D}from"./index.83aed4fc.js";import{b as h,i as G,j as O}from"./index.c0ca431c.js";import{c as N}from"./audio.170dbcbf.js";import{P as F,q as n,K as P}from"./framework.7e747cd7.js";import{F as S}from"./FFT.4a41ae6b.js";import{B as _,N as j}from"./BitCrusher.884c5bbc.js";import{F as A}from"./Filter.2b531c53.js";import{L as k,A as R}from"./AutoPanner.94a306f8.js";class m extends k{constructor(){super(d(m.getDefaults(),arguments,["frequency","baseFrequency","octaves"])),this.name="AutoFilter";const t=d(m.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);this.filter=new A(Object.assign(t.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency}static getDefaults(){return Object.assign(k.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(t){this._octaves=t,this._lfo.max=this._lfo.min*Math.pow(2,t)}dispose(){return super.dispose(),this.filter.dispose(),this}}const L={brown:"brown",pink:"pink",white:"white"},B={lowpass:"LP",highpass:"HP",bandpass:"BP"},I={sine:"SIN",triangle:"TRI",square:"SQR",sawtooth:"SAW"},o=h("noise-options",{noise:{type:"pink"},envelope:{attack:.1,decay:.1,sustain:.9,release:1},volume:1}),a=h("filter-options",{on:!1,play:!1,volume:.5,baseFrequency:50,depth:.1,frequency:1,octaves:2,wet:1,type:"sine",filter:{Q:1,type:"lowpass"}}),r=h("panner-options",{on:!1,play:!1,wet:1,frequency:1,depth:1,volume:1}),i=h("bit-options",{on:!1,bits:16,wet:1,volume:1});function W(){const c=F(!1),t=F([]),q=F([]),{channel:x}=N("noise"),s=new S({size:512,smoothing:.2}).connect(x);for(let e=0;e<32;e++)q.value[e]=s.getFrequencyOfIndex(e);const b=new v(o.value.volume).connect(s),y=new v(a.value.volume).connect(s),g=new v(r.value.volume).connect(s),w=new v(i.value.volume).connect(s),l=new R(r.value).connect(g),T=new _(i.value).connect(w).connect(l),u=new m(a.value).connect(y).connect(T),f=new j(o.value).connect(b).connect(u);return G(()=>{let e=s.getValue();for(let p=0;p<32;p++)t.value[p]=D(e[p])*10}),O("a",e=>{e.preventDefault(),c.value=!0},{eventName:"keydown"}),O("a",()=>{c.value=!1},{eventName:"keyup"}),n(c,e=>{e?f.triggerAttack():f.triggerRelease()}),n(o.value,()=>{f.set(o.value)}),n(()=>o.value.volume,e=>{b.gain.rampTo(e,1)}),P(()=>{f.triggerRelease()}),n(a.value,e=>{e.play?u.start():u.stop(),e.on?y.gain.rampTo(a.value.volume,.2):y.gain.rampTo(0,.2),u.set(e)}),n(r.value,e=>{e.play?l.start():l.stop(),e.on?g.gain.rampTo(r.value.volume,.2):g.gain.rampTo(0,.2),l.set(e)}),n(i.value,e=>{e.on?w.gain.rampTo(i.value.volume,.2):w.gain.rampTo(0,.2),T.set(e)}),{options:o,filterOptions:a,pannerOptions:r,crusherOptions:i,active:c,fftData:t,fftFreq:q,types:L,filterTypes:B,filterLFOTypes:I}}export{W as u};
