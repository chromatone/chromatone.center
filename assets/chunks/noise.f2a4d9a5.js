import{o as g,f as k,R as O,j as x,G as h}from"./index.e98b5e67.js";import{u as w,c as N,b as R}from"./index.4d18a0f4.js";import{b as j,c as A}from"./audio.36f0d408.js";import{B,N as G}from"./BitCrusher.ea8b684a.js";import{F as S}from"./Filter.ca6be54c.js";import{L as D,A as I}from"./AutoPanner.6f08faee.js";import{i as d,w as n,B as L}from"./framework.5d1030ab.js";class v extends D{constructor(){super(g(v.getDefaults(),arguments,["frequency","baseFrequency","octaves"])),this.name="AutoFilter";const e=g(v.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);this.filter=new S(Object.assign(e.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=e.octaves,this.baseFrequency=e.baseFrequency}static getDefaults(){return Object.assign(D.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(e){this._lfo.min=this.toFrequency(e),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(e){this._octaves=e,this._lfo.max=this._lfo.min*Math.pow(2,e)}dispose(){return super.dispose(),this.filter.dispose(),this}}class y extends j{constructor(){super(g(y.getDefaults(),arguments,["size"])),this.name="FFT";const e=g(y.getDefaults(),arguments,["size"]);this.normalRange=e.normalRange,this._analyser.type="fft",this.size=e.size}static getDefaults(){return Object.assign(k.getDefaults(),{normalRange:!1,size:1024,smoothing:.8})}getValue(){return this._analyser.getValue().map(o=>this.normalRange?O(o):o)}get size(){return this._analyser.size}set size(e){this._analyser.size=e}get smoothing(){return this._analyser.smoothing}set smoothing(e){this._analyser.smoothing=e}getFrequencyOfIndex(e){return x(0<=e&&e<this.size,`index must be greater than or equal to 0 and less than ${this.size}`),e*this.context.sampleRate/(this.size*2)}}const P={brown:"brown",pink:"pink",white:"white"},Q={lowpass:"LP",highpass:"HP",bandpass:"BP"},V={sine:"SIN",triangle:"TRI",square:"SQR",sawtooth:"SAW"},a=w("noise-options",{noise:{type:"pink"},envelope:{attack:.1,decay:.1,sustain:.9,release:1},volume:1}),r=w("filter-options",{on:!1,play:!1,volume:.5,baseFrequency:50,depth:.1,frequency:1,octaves:2,wet:1,type:"sine",filter:{Q:1,type:"lowpass"}}),i=w("panner-options",{on:!1,play:!1,wet:1,frequency:1,depth:1,volume:1}),l=w("bit-options",{on:!1,bits:16,wet:1,volume:1});function $(){const c=d(!1),e=d([]),o=d([]),{channel:_}=A("noise"),s=new y({size:512,smoothing:.2}).connect(_);for(let t=0;t<32;t++)o.value[t]=s.getFrequencyOfIndex(t);const z=new h(a.value.volume).connect(s),b=new h(r.value.volume).connect(s),q=new h(i.value.volume).connect(s),F=new h(l.value.volume).connect(s),u=new I(i.value).connect(q),T=new B(l.value).connect(F).connect(u),f=new v(r.value).connect(b).connect(T),m=new G(a.value).connect(z).connect(f);return N(()=>{let t=s.getValue();for(let p=0;p<32;p++)e.value[p]=O(t[p])*10}),R("a",t=>{t.preventDefault(),c.value=!0},{eventName:"keydown"}),R("a",()=>{c.value=!1},{eventName:"keyup"}),n(c,t=>{t?m.triggerAttack():m.triggerRelease()}),n(a.value,()=>{m.set(a.value)}),n(()=>a.value.volume,t=>{z.gain.rampTo(t,1)}),L(()=>{m.triggerRelease()}),n(r.value,t=>{t.play?f.start():f.stop(),t.on?b.gain.rampTo(r.value.volume,.2):b.gain.rampTo(0,.2),f.set(t)}),n(i.value,t=>{t.play?u.start():u.stop(),t.on?q.gain.rampTo(i.value.volume,.2):q.gain.rampTo(0,.2),u.set(t)}),n(l.value,t=>{t.on?F.gain.rampTo(l.value.volume,.2):F.gain.rampTo(0,.2),T.set(t)}),{options:a,filterOptions:r,pannerOptions:i,crusherOptions:l,active:c,fftData:e,fftFreq:o,types:P,filterTypes:Q,filterLFOTypes:V}}export{$ as u};
