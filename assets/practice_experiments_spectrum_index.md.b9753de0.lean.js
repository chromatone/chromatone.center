import{_ as z}from"./chunks/ControlStart.1293a848.js";import{o as _}from"./chunks/index.15d43a61.js";import{r as V,o as t,c as n,u as l,g as F,w as y,e as b,l as d,F as B,d as C,O as D,I as O,f as g}from"./chunks/framework.c1cedef0.js";import{u as N}from"./chunks/tuner.e0cc8296.js";import{b as P}from"./chunks/calculations.65ee336d.js";import{n as S}from"./chunks/colors.de92a8a1.js";import{e as h}from"./chunks/audio.cfce7ac5.js";import{F as T}from"./chunks/FFT.be12c558.js";import{U as $}from"./chunks/UserMedia.422a4351.js";import"./chunks/commonjsHelpers.de833af9.js";import"./chunks/index.654bd828.js";import"./chunks/midi.1606ad4f.js";import"./chunks/index.b30cd6d2.js";import"./chunks/synth.22724927.js";import"./chunks/Scale.9e7ce0e4.js";import"./chunks/Subtract.5ea10851.js";import"./chunks/PingPongDelay.676d5ea9.js";import"./chunks/AutoPanner.29670d9f.js";import"./chunks/MonoSynth.f53f33a9.js";import"./chunks/Filter.40ffebb0.js";import"./chunks/theory.61e5aadb.js";import"./chunks/index.86652af6.js";import"./chunks/index.44753b72.js";class c extends h{constructor(){super(_(c.getDefaults(),arguments,["size"])),this.name="Waveform";const o=_(c.getDefaults(),arguments,["size"]);this._analyser.type="waveform",this.size=o.size}static getDefaults(){return Object.assign(h.getDefaults(),{size:1024})}getValue(){return this._analyser.getValue()}get size(){return this._analyser.size}set size(o){this._analyser.size=o}}const j={class:"fullscreen-container",id:"screen"},U={class:"rounded-xl w-full h-full min-h-2xl -z3",id:"pitch-spectrum",version:"1.1",baseProfile:"full",viewBox:"0 0 512 300",xmlns:"http://www.w3.org/2000/svg"},q={key:0,class:"lines"},A=["stroke","x1","x2","y2"],I=["points","stroke"],M={__name:"spectrum",setup(x){const{init:o,tuner:m}=N(),r=new c(512),p=new T({size:4096,smoothing:0}),w=new $().connect(p).connect(r),e=V({initiated:!1,fft:[],wave:[],bands:[],points:""});for(let s=0;s<300;s++)e.bands[s]=p.getFrequencyOfIndex(s);function v(){w.open().then(()=>{o(),e.initiated=!0,console.log("mic open"),D(()=>{e.fft=p.getValue(),e.wave=r.getValue(),e.points=Array.from(e.wave).map((s,i)=>`${i},${120+280*s}`).join(" ")})}).catch(()=>{console.log("mic denied")})}return(s,i)=>{var f;const k=z;return t(),n("div",j,[l(m).initiated?d("",!0):(t(),F(k,{key:0,class:"absolute",onClick:i[0]||(i[0]=a=>v())},{default:y(()=>[b("Start")]),_:1})),(t(),n("svg",U,[e.fft.length>0?(t(),n("g",q,[(t(!0),n(B,null,C(e.bands,(a,u)=>(t(),n("line",{key:u,style:{transition:"all 500ms ease"},stroke:l(S)(l(P)(a),3,1-u/256),"stroke-linecap":"round","stroke-width":"0.5",x1:512*a/1500,y1:300,x2:512*a/1500,y2:-e.fft[u]*1.5},null,8,A))),128))])):d("",!0),e.points?(t(),n("polyline",{key:1,points:e.points,"stroke-width":"4",fill:"none",stroke:(f=l(m))==null?void 0:f.note.color},null,8,I)):d("",!0)]))])}}},ue=JSON.parse('{"title":"Spectrum analyzer","description":"Visually analyse the incoming audio spectrum and waveforms in realtime","frontmatter":{"title":"Spectrum analyzer","description":"Visually analyse the incoming audio spectrum and waveforms in realtime","date":"2021-04-05T00:00:00.000Z","cover":"spectrum.svg"},"headers":[],"relativePath":"practice/experiments/spectrum/index.md","filePath":"practice/experiments/spectrum/index.md","lastUpdated":1676883357000}'),E={name:"practice/experiments/spectrum/index.md"},de=Object.assign(E,{setup(x){return(o,m)=>{const r=O("client-only");return t(),n("div",null,[g(r,null,{default:y(()=>[g(M)]),_:1})])}}});export{ue as __pageData,de as default};
