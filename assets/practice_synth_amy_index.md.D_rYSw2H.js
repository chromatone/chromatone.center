const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/chunks/SynthAmy.DpYtZUsi.js","assets/chunks/framework.CYx1s6BW.js","assets/chunks/theme.BJ9F72QS.js"])))=>i.map(i=>d[i]);
import{o as e,R as r,y as a,X as o,E as s,Y as i,x as n,at as l,_ as h}from"./chunks/framework.CYx1s6BW.js";import{aJ as t}from"./chunks/theme.BJ9F72QS.js";const f=i('<h2 id="amy-synth" tabindex="-1">AMY Synth <a class="header-anchor" href="#amy-synth" aria-label="Permalink to &quot;AMY Synth&quot;">​</a></h2><h3 id="the-additive-music-synthesizer-library" tabindex="-1">the Additive Music synthesizer librarY <a class="header-anchor" href="#the-additive-music-synthesizer-library" aria-label="Permalink to &quot;the Additive Music synthesizer librarY&quot;">​</a></h3><p>Highly experimental. <a href="https://github.com/bwhitman/amy/issues/35" target="_blank" rel="noreferrer">Issue pending</a></p><ul><li>Press <code>A</code> on your keyboard to play a note. Or push the PLAY button.</li><li>Use <i class="p-3 i-la-arrow-left"></i> and <i class="p-3 i-la-arrow-right"></i> keys to browse patches</li></ul><p><a href="https://github.com/bwhitman/amy" target="_blank" rel="noreferrer">AMY repository</a></p><p>AMY accepts commands in ASCII, like so:</p><h1 id="v0w4f440-0l0-9" tabindex="-1">v0w4f440.0l0.9 <a class="header-anchor" href="#v0w4f440-0l0-9" aria-label="Permalink to &quot;v0w4f440.0l0.9&quot;">​</a></h1><p>Here&#39;s the full list:</p><table tabindex="0"><thead><tr><th>Code</th><th>Python</th><th>Type-range</th><th>Notes</th></tr></thead><tbody><tr><td>a</td><td>amp</td><td>float 0-1+</td><td>use after a note on is triggered with velocity to adjust amplitude without re-triggering the note</td></tr><tr><td>A</td><td>bp0</td><td>string</td><td>in commas, like 100,0.5,150,0.25,200,0 -- envelope generator with alternating time(ms) and ratio. last pair triggers on note off</td></tr><tr><td>B</td><td>bp1</td><td>string</td><td>set the second breakpoint generator. see breakpoint 0</td></tr><tr><td>b</td><td>feedback</td><td>float 0-1</td><td>use for the ALGO synthesis type in FM, or partial synthesis (for bandwidth) or for karplus-strong, or to indicate PCM looping (0 off, &gt;0, on)</td></tr><tr><td>C</td><td>bp2</td><td>string</td><td>3rd breakpoint generator</td></tr><tr><td>d</td><td>duty</td><td>float 0.001-0.999</td><td>duty cycle for pulse wave, default 0.5</td></tr><tr><td>D</td><td>debug</td><td>uint, 2-4</td><td>2 shows queue sample, 3 shows oscillator data, 4 shows modified oscillator. will interrupt audio!</td></tr><tr><td>f</td><td>freq</td><td>float</td><td>frequency of oscillator</td></tr><tr><td>F</td><td>filter_freq</td><td>float</td><td>center frequency for biquad filter</td></tr><tr><td>g</td><td>mod_target</td><td>uint mask</td><td>Which parameter modulation/LFO controls. 1=amp, 2=duty, 4=freq, 8=filter freq, 16=resonance, 32=feedback. Can handle any combo, add them together</td></tr><tr><td>G</td><td>filter_type</td><td>0-3</td><td>0 = none (default.) 1 = low pass, 2 = band pass, 3 = hi pass.</td></tr><tr><td>I</td><td>ratio</td><td>float</td><td>for ALGO types, where the base note frequency controls the modulators, or for the ALGO base note and PARTIALS base note, where the ratio controls the speed of the playback</td></tr><tr><td>L</td><td>mod_source</td><td>0 to OSCS-1</td><td>Which oscillator is used as an modulation/LFO source for this oscillator. Source oscillator will be silent.</td></tr><tr><td>l</td><td>vel</td><td>float 0-1+</td><td>velocity - &gt;0 to trigger note on, 0 to trigger note off. sets amplitude</td></tr><tr><td>N</td><td>latency_ms</td><td>uint</td><td>sets latency in ms. default 0</td></tr><tr><td>n</td><td>note</td><td>uint 0-127</td><td>midi note, sets frequency</td></tr><tr><td>o</td><td>algorithm</td><td>uint 1-32</td><td>DX7 algorith to use for ALGO type</td></tr><tr><td>O</td><td>algo_source</td><td>string</td><td>which oscillators to use for the algorithm. list of six, use -1 for not used, e.g 0,1,2,-1,-1-1</td></tr><tr><td>p</td><td>patch</td><td>uint</td><td>choose a preloaded PCM sample, partial patch or FM patch number for ALGO waveforms.</td></tr><tr><td>P</td><td>phase</td><td>float 0-1</td><td>where in the oscillator&#39;s cycle to start sampling from (also works on the PCM buffer). default 0</td></tr><tr><td>R</td><td>resonance</td><td>float</td><td>q factor of biquad filter. in practice, 0-10.0. default 0.7</td></tr><tr><td>S</td><td>reset</td><td>uint</td><td>resets given oscillator. set to &gt; OSCS to reset all oscillators, gain and EQ</td></tr><tr><td>T</td><td>bp0_target</td><td>uint mask</td><td>Which parameter bp0 controls. 1=amp, 2=duty, 4=freq, 8=filter freq, 16=resonance, 32=feedback (can be added together). Can add 64 for linear ramp, otherwise exponential</td></tr><tr><td>t</td><td>timestamp</td><td>uint</td><td>ms of expected playback since some fixed start point on your host. you should always give this if you can.</td></tr><tr><td>v</td><td>osc</td><td>uint 0 to OSCS-1</td><td>which oscillator to control</td></tr><tr><td>V</td><td>volume</td><td>float 0-10</td><td>volume knob for entire synth, default 1.0</td></tr><tr><td>w</td><td>wave</td><td>uint 0-11</td><td>waveform: [0=SINE, PULSE, SAW_DOWN, SAW_UP, TRIANGLE, NOISE, KS, PCM, ALGO, PARTIAL, PARTIALS, OFF]. default: 0/SINE</td></tr><tr><td>W</td><td>bp1_target</td><td>uint mask</td><td>see bp0_target</td></tr><tr><td>x</td><td>eq_l</td><td>float</td><td>in dB, fc=800Hz amount, -15 to 15. 0 is off. default 0.</td></tr><tr><td>X</td><td>bp2_target</td><td>uint mask</td><td>see bp0_target</td></tr><tr><td>y</td><td>eq_m</td><td>float</td><td>in dB, fc=2500Hz amount, -15 to 15. 0 is off. default 0.</td></tr><tr><td>z</td><td>eq_h</td><td>float</td><td>in dB, fc=7500Hz amount, -15 to 15. 0 is off. default 0.</td></tr></tbody></table>',9),g=JSON.parse('{"title":"AMY synth","description":"Wasm synth playground","frontmatter":{"title":"AMY synth","description":"Wasm synth playground","date":"2013-03-05T00:00:00.000Z","cover":"dx7_algorithms.jpg","layout":"app"},"headers":[],"relativePath":"practice/synth/amy/index.md","filePath":"practice/synth/amy/index.md","lastUpdated":1723548427000}'),c={name:"practice/synth/amy/index.md"},_=Object.assign(c,{setup(u){const d=l(()=>h(()=>import("./chunks/SynthAmy.DpYtZUsi.js"),__vite__mapDeps([0,1,2])));return e(()=>t.value=!1),r(()=>t.value=!0),(p,m)=>(n(),a("div",null,[o(s(d)),f]))}});export{g as __pageData,_ as default};
